// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/sagikazarmark/modern-go-application/internal/app/mga/todo/todoadapter/ent/todoitem"
)

// TodoItemCreate is the builder for creating a TodoItem entity.
type TodoItemCreate struct {
	config
	mutation *TodoItemMutation
	hooks    []Hook
}

// SetUID sets the uid field.
func (tic *TodoItemCreate) SetUID(s string) *TodoItemCreate {
	tic.mutation.SetUID(s)
	return tic
}

// SetTitle sets the title field.
func (tic *TodoItemCreate) SetTitle(s string) *TodoItemCreate {
	tic.mutation.SetTitle(s)
	return tic
}

// SetCompleted sets the completed field.
func (tic *TodoItemCreate) SetCompleted(b bool) *TodoItemCreate {
	tic.mutation.SetCompleted(b)
	return tic
}

// SetOrder sets the order field.
func (tic *TodoItemCreate) SetOrder(i int) *TodoItemCreate {
	tic.mutation.SetOrder(i)
	return tic
}

// SetCreatedAt sets the created_at field.
func (tic *TodoItemCreate) SetCreatedAt(t time.Time) *TodoItemCreate {
	tic.mutation.SetCreatedAt(t)
	return tic
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (tic *TodoItemCreate) SetNillableCreatedAt(t *time.Time) *TodoItemCreate {
	if t != nil {
		tic.SetCreatedAt(*t)
	}
	return tic
}

// SetUpdatedAt sets the updated_at field.
func (tic *TodoItemCreate) SetUpdatedAt(t time.Time) *TodoItemCreate {
	tic.mutation.SetUpdatedAt(t)
	return tic
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (tic *TodoItemCreate) SetNillableUpdatedAt(t *time.Time) *TodoItemCreate {
	if t != nil {
		tic.SetUpdatedAt(*t)
	}
	return tic
}

// Mutation returns the TodoItemMutation object of the builder.
func (tic *TodoItemCreate) Mutation() *TodoItemMutation {
	return tic.mutation
}

// Save creates the TodoItem in the database.
func (tic *TodoItemCreate) Save(ctx context.Context) (*TodoItem, error) {
	var (
		err  error
		node *TodoItem
	)
	tic.defaults()
	if len(tic.hooks) == 0 {
		if err = tic.check(); err != nil {
			return nil, err
		}
		node, err = tic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TodoItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tic.check(); err != nil {
				return nil, err
			}
			tic.mutation = mutation
			node, err = tic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tic.hooks) - 1; i >= 0; i-- {
			mut = tic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tic *TodoItemCreate) SaveX(ctx context.Context) *TodoItem {
	v, err := tic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tic *TodoItemCreate) defaults() {
	if _, ok := tic.mutation.CreatedAt(); !ok {
		v := todoitem.DefaultCreatedAt()
		tic.mutation.SetCreatedAt(v)
	}
	if _, ok := tic.mutation.UpdatedAt(); !ok {
		v := todoitem.DefaultUpdatedAt()
		tic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tic *TodoItemCreate) check() error {
	if _, ok := tic.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New("ent: missing required field \"uid\"")}
	}
	if v, ok := tic.mutation.UID(); ok {
		if err := todoitem.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf("ent: validator failed for field \"uid\": %w", err)}
		}
	}
	if _, ok := tic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New("ent: missing required field \"title\"")}
	}
	if _, ok := tic.mutation.Completed(); !ok {
		return &ValidationError{Name: "completed", err: errors.New("ent: missing required field \"completed\"")}
	}
	if _, ok := tic.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New("ent: missing required field \"order\"")}
	}
	if _, ok := tic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := tic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	return nil
}

func (tic *TodoItemCreate) sqlSave(ctx context.Context) (*TodoItem, error) {
	_node, _spec := tic.createSpec()
	if err := sqlgraph.CreateNode(ctx, tic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tic *TodoItemCreate) createSpec() (*TodoItem, *sqlgraph.CreateSpec) {
	var (
		_node = &TodoItem{config: tic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: todoitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: todoitem.FieldID,
			},
		}
	)
	if value, ok := tic.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: todoitem.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := tic.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: todoitem.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := tic.mutation.Completed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: todoitem.FieldCompleted,
		})
		_node.Completed = value
	}
	if value, ok := tic.mutation.Order(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: todoitem.FieldOrder,
		})
		_node.Order = value
	}
	if value, ok := tic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: todoitem.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: todoitem.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// TodoItemCreateBulk is the builder for creating a bulk of TodoItem entities.
type TodoItemCreateBulk struct {
	config
	builders []*TodoItemCreate
}

// Save creates the TodoItem entities in the database.
func (ticb *TodoItemCreateBulk) Save(ctx context.Context) ([]*TodoItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ticb.builders))
	nodes := make([]*TodoItem, len(ticb.builders))
	mutators := make([]Mutator, len(ticb.builders))
	for i := range ticb.builders {
		func(i int, root context.Context) {
			builder := ticb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TodoItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ticb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ticb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ticb *TodoItemCreateBulk) SaveX(ctx context.Context) []*TodoItem {
	v, err := ticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
